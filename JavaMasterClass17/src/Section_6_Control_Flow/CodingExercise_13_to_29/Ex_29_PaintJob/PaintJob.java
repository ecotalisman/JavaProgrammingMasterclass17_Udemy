package Section_6_Control_Flow.CodingExercise_13_to_29.Ex_29_PaintJob;

public class PaintJob {
    public static int getBucketCount(double width, double height, double areaPerBucket, int extraBuckets) {
        if (width <= 0 || height <= 0 || areaPerBucket <= 0 || extraBuckets < 0) {
            return -1;
        }
        double area = width * height;
        int bucketsNeeded = (int) Math.ceil((area - (extraBuckets * areaPerBucket)) / areaPerBucket);
        return bucketsNeeded;
    }

    public static int getBucketCount(double width, double height, double areaPerBucket) {
        return getBucketCount(width, height, areaPerBucket, 0);
    }

    public static int getBucketCount(double area, double areaPerBucket) {
        if (area <= 0 || areaPerBucket <= 0) {
            return -1;
        }
        int bucketsNeeded = (int) Math.ceil(area / areaPerBucket);
        return bucketsNeeded;
    }
}

/*
Math.ceil() є статичним методом класу Math в Java, який приймає один аргумент типу double і повертає найменше ціле
число, яке більше або дорівнює вказаному дійсному числу.

У коді, коли ми використовуємо метод Math.ceil(), ми вказуємо число, яке ми хочемо округлити до більшого цілого числа.
Наприклад, якщо ми використовуємо Math.ceil(3.4), то метод поверне 4.0, оскільки це є найменше ціле число, яке більше
або дорівнює 3.4. Аналогічно, якщо ми використовуємо Math.ceil(5.9), то метод поверне 6.0, оскільки це є найменше ціле
число, яке більше або дорівнює 5.9.

Метод Math.ceil() корисний, коли нам потрібно округлити дійсне число до більшого цілого, наприклад, коли ми розраховуємо
кількість відр боя, як у вищезгаданих завданнях. Після обчислення кількості відрів боя в дійсному форматі, ми можемо
використовувати Math.ceil() для округлення до більшого цілого числа, щоб визначити точну кількість відрів, які потрібно
купити. Потім ми можемо перетворити це дійсне число в int і повернути це значення з методу.

МЕТОДИ:
I) Перший метод getBucketCount має 4 параметри - ширину, висоту, площу, яку можна забарвити однією відрою фарби, та
кількість додаткових відер фарби, які вже є в наявності у Боба. Метод повертає кількість відер фарби, які потрібно
купити перед початком роботи. Якщо один з параметрів (ширина, висота або площа на одне відро) менше або дорівнює 0,
або кількість додаткових відер менше 0, метод поверне -1. Якщо всі параметри коректні, метод розрахує кількість відер
фарби, які потрібно купити, і поверне це значення.

II) Другий метод getBucketCount має 3 параметри - ширину, висоту та площу на одне відро. Цей метод викликає перший метод,
передаючи до нього 3 параметри, та кількість додаткових відер (яка у цьому випадку дорівнює 0). Якщо один з параметрів
(ширина, висота або площа на одне відро) менше або дорівнює 0, метод поверне -1. Якщо всі параметри коректні, метод
розрахує кількість відер фарби, які потрібно купити, і поверне це значення.

III)Третій метод getBucketCount з двома параметрами area та areaPerBucket обчислює кількість відрафарбовувальної фарби,
необхідної для фарбування поверхні з вказаною площею area, при умові, що одне відро фарби може покрити площу areaPerBucket.

Ось кроки, які робить цей метод:

1) Перевіряється, чи є вхідні значення коректними - area та areaPerBucket повинні бути більше 0. Якщо хоча б один з
параметрів менше або дорівнює 0, метод повертає -1, щоб позначити неприпустиме значення.

2) Якщо всі вхідні параметри коректні, метод обчислює кількість відрафарбовувальної фарби, яку необхідно придбати для
фарбування поверхні. Для цього площа area розділяється на площу, яку може покрити одне відро фарби areaPerBucket.
Обчислена кількість відр фарби округлюється вверх до найближчого цілого числа за допомогою функції Math.ceil.

3) Кількість відрафарбовувальної фарби, яку необхідно придбати, повертається як результат виконання методу.

*/
